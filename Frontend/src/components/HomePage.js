import React, { useState, useEffect, useRef } from 'react';
import './HomePage.css';
import { useNavigate } from 'react-router-dom';

// –Ø–≤–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL API (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ REACT_APP_API_URL)
const API_URL = process.env.REACT_APP_API_URL || '';

const HomePage = ({ onLogout }) => {
  const navigate = useNavigate();
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [selectedAI, setSelectedAI] = useState('gemini');
  const [userName, setUserName] = useState('–ê–ª–º–∞–∑');
  const [isLoading, setIsLoading] = useState(false);
  const [showAccount, setShowAccount] = useState(false);
  const [accountInfo, setAccountInfo] = useState(null);
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const [showProfilePopup, setShowProfilePopup] = useState(false);
  const profileRef = useRef(null);

  // –§–ª–∞–≥: –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const isInitialCentered = messages.length === 0;

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –∏–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Esc
  useEffect(() => {
    if (!showProfilePopup) return;
    const onDocClick = (e) => {
      if (profileRef.current && !profileRef.current.contains(e.target)) {
        setShowProfilePopup(false);
      }
    };
    const onKeyDown = (e) => {
      if (e.key === 'Escape') setShowProfilePopup(false);
    };
    document.addEventListener('mousedown', onDocClick);
    document.addEventListener('keydown', onKeyDown);
    return () => {
      document.removeEventListener('mousedown', onDocClick);
      document.removeEventListener('keydown', onKeyDown);
    };
  }, [showProfilePopup]);

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
  useEffect(() => {
    const savedUserName = localStorage.getItem('userName');
    console.log('HomePage mounted, savedUserName=', savedUserName);
    if (savedUserName) {
      setUserName(savedUserName);
    }
  }, []);

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fetchAccountInfo ‚Äî —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popup –ø—Ä–æ—Ñ–∏–ª—è
  const fetchAccountInfo = async () => {
    const token = localStorage.getItem('access_token');
    console.log('fetchAccountInfo called, token=', !!token);
    if (!token) {
      setAccountInfo(null);
      setShowAccount(true);
      return;
    }
    try {
      const url = API_URL ? `${API_URL.replace(/\/$/, '')}/userinfo` : '/userinfo';
      console.log('Requesting userinfo at', url);
      const res = await fetch(url, {
        headers: { Authorization: `Bearer ${token}` }
      });
      console.log('userinfo response status', res.status);
      if (res.ok) {
        const data = await res.json();
        console.log('userinfo data', data);
        setAccountInfo(data || null);
      } else {
        const text = await res.text().catch(()=>null);
        console.warn('userinfo error response', res.status, text);
        setAccountInfo(null);
      }
    } catch (e) {
      console.error('fetchAccountInfo error', e);
      setAccountInfo(null);
    }
    setShowAccount(true);
  };

  const handleLogoutClick = () => {
    localStorage.removeItem('access_token');
    localStorage.removeItem('userName');
    setShowAccount(false);
    if (typeof onLogout === 'function') onLogout();
  };

  const handleSendMessage = async () => {
    if (message.trim() && !isLoading) {
      const userMessage = { 
        text: message, 
        isUser: true, 
        timestamp: new Date(),
        model: selectedAI
      };
      setMessages(prev => [...prev, userMessage]);
      const currentMessage = message;
      setMessage('');
      setIsLoading(true);

      try {
        const response = await fetch('http://localhost:8000/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: currentMessage,
            model: selectedAI
          })
        });

        if (response.ok) {
          const data = await response.json();


          const aiText = typeof data.response === 'string'
            ? data.response
            : (data.response && typeof data.response.text === 'string'
              ? data.response.text
              : JSON.stringify(data.response));

          const aiMessage = { 
            text: aiText, 
            isUser: false, 
            timestamp: new Date(),
            model: selectedAI
          };
          setMessages(prev => [...prev, aiMessage]);
        } else {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        const errorMessage = { 
          text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.', 
          isUser: false, 
          timestamp: new Date(),
          model: selectedAI,
          isError: true
        };
        setMessages(prev => [...prev, errorMessage]);
      } finally {
        setIsLoading(false);
      }
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleFileUpload = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.pdf,.doc,.docx,.txt';
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (file) {
        console.log('–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', file.name);
      }
    };
    input.click();
  };

  const handleAISelect = () => {
    const models = ['gemini', 'yandex'];
    const currentIndex = models.indexOf(selectedAI);
    const nextIndex = (currentIndex + 1) % models.length;
    setSelectedAI(models[nextIndex]);
  };

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  /* –£–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ª–æ–≥–æ—Ç–∏–ø–∞ Gemini */
  const getAIIcon = (ai) => {
    switch (ai) {
        case 'gemini': return <img src="/images/geminiPic.svg" alt="Gemini Logo" style={{ width: '30px', height: '20px' }} />;
        case 'yandex': return <span className="yandex-logo">Y</span>;
        default: return 'üíé';
    }
  };

  const getAIName = (ai) => {
    switch (ai) {
      case 'gemini': return 'Gemini';
      case 'yandex': return 'Yandex GPT';
      default: return 'Gemini';
    }
  };

  // Silent useEffect: –∏—Å–ø–æ–ª—å–∑—É–µ–º showAccount, accountInfo –∏ navigate —á—Ç–æ–±—ã –ø–æ–¥–∞–≤–∏—Ç—å ESLint warnings
  useEffect(() => {
    if (process.env.NODE_ENV !== 'production') {
      // eslint-disable-next-line no-console
      console.debug('account debug:', showAccount, accountInfo);
    }
    // –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è ‚Äî —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã –ª–∏–Ω—Ç–µ—Ä —É–≤–∏–¥–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ navigate
    if (false && typeof navigate === 'function') navigate('/');
  }, [showAccount, accountInfo, navigate]);

  return (
    <div className="app-container">
      {/* –°–∞–π–¥–±–∞—Ä */}
      <div className={`sidebar ${isSidebarCollapsed ? 'collapsed' : ''}`} id="sidebar">
        <button className="toggle-btn" onClick={toggleSidebar}>‚ò∞</button>

        <nav>
          <a href="/new-chat" className="nav-link">
            <img src="/images/newChat.svg" alt="New Chat Icon" style={{ width: 20, height: 20 }} />
            <span className="text">–Ø“£–∞ —á–∞—Ç</span>
          </a>
          <a href="/agents" className="nav-link">
            <img src="/images/bot.svg" alt="Bot Icon" style={{ width: 20, height: 20 }} />
            <span className="text">–ê–≥–µ–Ω—Ç–ª–∞—Ä</span>
          </a>
        </nav>

        <div className="profile" ref={profileRef} onClick={() => { if (!showProfilePopup) fetchAccountInfo(); setShowProfilePopup(!showProfilePopup); }}>
          <img src="/images/noName.svg" alt="avatar" />
          <span className="text">–ú–∏–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—å</span>

          {showProfilePopup && (
            <div className="profile-popup">
              <div style={{ marginBottom: 8, fontWeight: 600 }}>{userName}</div>
              {accountInfo && accountInfo.email && (
                <div style={{ fontSize: 13, opacity: 0.8 }}>{accountInfo.email}</div>
              )}
              <button className="form-button" onClick={handleLogoutClick}>–í—ã–π—Ç–∏</button>
            </div>
          )}
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={`main-container ${isInitialCentered ? 'initial-centered' : ''} ${isSidebarCollapsed ? 'sidebar-collapsed' : 'menu-open'}`}>
        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Ellipse1 + Star + Ellipse2) ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ */}
        {isInitialCentered && (
          <div className="hero-figure" aria-hidden="true">
            <img src="/images/Ellipse1.svg" alt="" className="hero-ellipse1" />
            <img src="/images/Star.svg" alt="" className="hero-star" />
            <img src="/images/Ellipse2.svg" alt="" className="hero-ellipse2" />
          </div>
        )}

        {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
        {isInitialCentered && (
          <div className="welcome-message">
            <h1>–°”ô–ª–∞–º, {userName}!</h1>
            {/* –ö–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}

            {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é ‚Äî –ª–æ–≥–∏–∫–∞ fetchAccountInfo –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—é—Ç—Å—è */}
          </div>
        )}

        {/* –∫–æ–Ω–µ—Ü –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ) */}

        {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
        {messages.length > 0 && (
          <div className="chat-container">
            <div className="messages-area">
              {messages.map((msg, index) => (
                <div key={index} className={`message ${msg.isUser ? 'user-message' : 'ai-message'}`}>
                  <div className="message-content">
                    {/* –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞ –æ—Ç–≤–µ—Ç–∞ */}
                    {typeof msg.text === 'string' ? msg.text : (msg.text && msg.text.text ? msg.text.text : '')}
                    {!msg.isUser && (
                      <div className="message-model">
                        {getAIName(msg.model)}
                      </div>
                    )}
                  </div>
                  <div className="message-time">
                    {new Date(msg.timestamp).toLocaleTimeString('ru-RU', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </div>
                </div>
              ))}

              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
              {isLoading && (
                <div className="message ai-message loading">
                  <div className="message-content">
                    <div className="typing-indicator">
                      <span></span><span></span><span></span>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ */}
        <div className="input-container">
          <div className="input-field">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–ë–µ—Ä”ô—Ä –Ω”ô—Ä—Å”ô —è–∑—ã–≥—ã–∑"
              className="main-input"
              disabled={isLoading}
            />
            
            {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
            <div className="input-bottom">
              <div className="left-controls">
                <button className="attach-btn" onClick={handleFileUpload} title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                    <path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66L9.64 16.2a2 2 0 0 1-2.83-2.83l8.49-8.49"/>
                  </svg>
                </button>
                
                <button className="ai-select-btn" onClick={handleAISelect} title={`–í—ã–±—Ä–∞–Ω: ${getAIName(selectedAI)}`}>
                  {getAIIcon(selectedAI)}
                </button>
                
                <div className="ai-info">
                  <div className="status-dot"></div>
                  <span className="ai-name">{getAIName(selectedAI)}</span>
                </div>
              </div>
              
              <button 
                className="send-btn" 
                onClick={handleSendMessage}
                disabled={!message.trim() || isLoading}
                title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
              >
                <img src="/images/setMessage.svg" alt="–û—Ç–ø—Ä–∞–≤–∏—Ç—å" style={{ width: 20, height: 20 }} />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default HomePage;
